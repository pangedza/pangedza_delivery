import 'dart:convert';
import 'dart:io' show Platform;
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/foundation.dart';
import 'package:intl/intl.dart';

import '../config.dart';
import '../models/order.dart';

class TelegramService {
  static String get _token => dotenv.env['TELEGRAM_BOT_TOKEN'] ?? '';
  static String get _chatId => dotenv.env['TELEGRAM_CHAT_ID'] ?? '';

  static Future<void> sendOrder(String message) async {
    if (!kEnableTelegramOrderForwarding) return;
    if (_token.isEmpty || _chatId.isEmpty) {
      debugPrint('Telegram token or chat id is not set');
      return;
    }
    final url = Uri.parse('https://api.telegram.org/bot$_token/sendMessage');
    debugPrint('Sending order to Telegram: $message');
    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          // Explicitly set a simple User-Agent to avoid issues with Windows
          // HttpClient rejecting non-ASCII values.
          'User-Agent': 'flutter-app',
        },
        body: jsonEncode({
          'chat_id': _chatId,
          'text': message,
          'parse_mode': 'Markdown',
        }),
      );
      debugPrint(
          'Telegram response: ${response.statusCode} ${response.body}');
      if (response.statusCode != 200) {
        debugPrint('Telegram error: ${response.body}');
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: $e');
    }
  }

  /// Builds a full address string for Telegram from non-empty [order] fields.
  static String buildFullAddress(Order order) {
    final parts = <String>[];
    if (order.city.isNotEmpty) parts.add('–≥. ${order.city}');
    if (order.street.isNotEmpty) parts.add('—É–ª. ${order.street}');
    if (order.house.isNotEmpty) parts.add('–¥. ${order.house}');
    if (order.flat.isNotEmpty) parts.add('–∫–≤. ${order.flat}');
    if (order.intercom.isNotEmpty) parts.add('–ø–æ–¥—ä–µ–∑–¥ ${order.intercom}');
    if (order.floor.isNotEmpty) parts.add('—ç—Ç–∞–∂ ${order.floor}');
    return parts.join(', ');
  }

  static String buildTelegramMessage(Order order) {
    final addressText = buildFullAddress(order);

    final safeAddress =
        addressText.isNotEmpty ? addressText : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    String paymentText;
    switch (order.payment) {
      case 'cash':
        paymentText = '–ù–∞–ª–∏—á–Ω—ã–µ';
        break;
      case 'terminal':
        paymentText = order.pickup ? '–ö–∞—Ä—Ç–∞' : '–ö–∞—Ä—Ç–∞ –∫—É—Ä—å–µ—Ä—É';
        break;
      case 'online':
        paymentText = '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞';
        break;
      default:
        paymentText = order.payment;
    }

    final safePayment = paymentText.isNotEmpty ? paymentText : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    final itemsText = order.items
        .map((e) =>
            '‚Ä¢ ${e.dish.name} ${e.variant.title} √ó${e.quantity} ‚Äî ${e.variant.price} ‚ÇΩ')
        .join('\n');

    final orderIdForMessage =
        order.orderNumber != 0 ? order.orderNumber.toString() : order.id;

    final buffer = StringBuffer()
      ..writeln('üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!')
      ..writeln('üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: $orderIdForMessage')
      ..writeln('üë§ –ö–ª–∏–µ–Ω—Ç: ${order.name}')
      ..writeln('üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}');

    buffer
      ..writeln('üìç –ê–¥—Ä–µ—Å: $safeAddress')
      ..writeln('üí∞ –û–ø–ª–∞—Ç–∞: $safePayment')
      ..writeln(order.pickup ? 'üö∂ –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑' : 'üöö –î–æ—Å—Ç–∞–≤–∫–∞: –ö—É—Ä—å–µ—Ä');

    buffer
      ..writeln('üßæ –ó–∞–∫–∞–∑:')
      ..writeln(itemsText)
      ..writeln('üíµ –°—É–º–º–∞: ${order.total} ‚ÇΩ');

    if (order.comment.isNotEmpty) {
      buffer.writeln('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}');
    }

    buffer.writeln('‚è∞ –í—Ä–µ–º—è: ${DateFormat('yyyy-MM-dd HH:mm').format(order.date)}');
    return buffer.toString();
  }

  /// Sends an [Order] details to the configured Telegram chat.
  static Future<void> sendOrderToTelegram(Order order) async {
    if (!kEnableTelegramOrderForwarding) return;
    if (_token.isEmpty || _chatId.isEmpty) {
      debugPrint('Telegram token or chat id is not set');
      return;
    }

    final message = buildTelegramMessage(order);
    debugPrint('Telegram order message: $message');
    await sendOrder(message);
  }
}
