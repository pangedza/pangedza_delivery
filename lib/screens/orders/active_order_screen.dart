import 'package:flutter/material.dart';
import '../../models/order.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class ActiveOrderScreen extends StatelessWidget {
  final List<Order> orders;
  final VoidCallback onCancelled;

  const ActiveOrderScreen({super.key, required this.orders, required this.onCancelled});

  Future<void> _cancelOrder(BuildContext context, Order order) async {
    try {
      await Supabase.instance.client
          .from('orders')
          .update({'status': 'cancelled'})
          .eq('id', order.id);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')),
        );
      }
      onCancelled();
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (orders.isEmpty) {
      return const Center(child: Text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤'));
    }
    return ListView.builder(
      itemCount: orders.length,
      itemBuilder: (context, index) {
        final order = orders[index];
        final firstItem = order.items.isNotEmpty ? order.items.first : null;
        return Container(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [
              BoxShadow(
                color: Colors.black12,
                blurRadius: 4,
                offset: Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('üßæ –ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber}',
                  style: const TextStyle(fontWeight: FontWeight.bold)),
              if (firstItem != null)
                Text('üçΩ ${firstItem.dish.name} √ó${firstItem.quantity}'),
              Text('üì¶ ${order.deliveryType == 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}'),
              Text('üìå –°—Ç–∞—Ç—É—Å: ${order.statusDisplay}'),
              Text('üí∞ –°—É–º–º–∞: ${order.discountedTotal}‚ÇΩ'),
              if (order.status == 'active')
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () => _cancelOrder(context, order),
                    child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'),
                  ),
                ),
            ],
          ),
        );
      },
    );
  }
}
